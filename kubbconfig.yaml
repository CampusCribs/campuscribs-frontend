openapi: 3.1.1
info:
  version: 1.0.0
  title: CampusCribs
  description: CampusCribs API Implementation Specification
paths:
  # User auth endpoints
  /users/me:
    get:
      tags:
        - User
      summary: Get current user
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
  #HomePage endpoints

  #Fetches all tags
  /public/tags:
    get:
      tags:
        - Tag
      summary: Get all tags
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    name:
                      type: string
                    tagCategoryId:
                      type: string
  #Fetches curated posts for user
  /public/curated:
    get:
      tags:
        - Curated
      summary: Get curated items
      parameters:
        - in: query
          name: tag
          description: Filter by tags
          required: false
          schema:
            type: array
            items:
              type: string
          style: form
          explode: true
        - in: query
          name: page
          description: Page number (0-based)
          required: false
          schema:
            type: integer
            default: 0
        - in: query
          name: size
          description: Number of results per page
          required: false
          schema:
            type: integer
            default: 20
        - in: query
          name: sort
          description: Sort by field (e.g. `price,asc` or `mediaId,desc`)
          required: false
          schema:
            type: array
            items:
              type: string
          style: form
          explode: true

      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      type: object
                      properties:
                        userId:
                          type: string
                          format: uuid
                        id:
                          type: string
                        mediaId:
                          type: string
                        price:
                          type: number
                        iconKey:
                          tye: string
                        name:
                          type: string
                        ableToUse:
                          type: boolean
                  pageable:
                    type: object
                  totalPages:
                    type: integer
                  totalElements:
                    type: integer
                  size:
                    type: integer
                  number:
                    type: integer
                  sort:
                    type: object
                  first:
                    type: boolean
                  last:
                    type: boolean
                  numberOfElements:
                    type: integer
                  empty:
                    type: boolean
  #Search endpoint for posts and users
  /public/search:
    get:
      summary: Search for posts and users
      parameters:
        - in: query
          name: query
          required: true
          description: Search term
          schema:
            type: string
      responses:
        "200":
          description: Successful search
          content:
            application/json:
              schema:
                type: object
                properties:
                  posts:
                    type: array
                    items:
                      type: object
                      properties:
                        userId:
                          type: string
                          format: uuid
                        id:
                          type: string
                          format: uuid
                        title:
                          type: string
                        thumbnail:
                          type: string
                          nullable: true
                  users:
                    type: array
                    items:
                      type: object
                      properties:
                        username:
                          type: string
                        thumbnailMediaId:
                          type: string
                          nullable: true
                        userId:
                          type: string
                          format: uuid
  #Fetch individual post
  /public/crib/{postId}:
    get:
      summary: Get a public post by ID
      tags:
        - Public Posts
      parameters:
        - name: postId
          in: path
          required: true
          description: The ID of the post to retrieve
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Successful retrieval of the post
          content:
            application/json:
              schema:
                type: object
                properties:
                  userThumbnailId:
                    type: string
                    format: uuid
                  userId:
                    type: string
                    format: uuid
                  id:
                    type: string
                    format: uuid
                  firstName:
                    type: string
                  lastName:
                    type: string
                  username:
                    type: string
                  institutionName:
                    type: string
                  title:
                    type: string
                  description:
                    type: string
                  price:
                    type: number
                  roommates:
                    type: integer
                  mediaIds:
                    type: array
                    items:
                      type: string
                      format: uuid
                  tags:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                        name:
                          type: string
                  termStartDate:
                    type: string
                    format: date-time
                  termEndDate:
                    type: string
                    format: date-time
  #Edit profile endpoints

  #Fetch presigned URL for media upload
  /users/me/thumbnail-upload:
    get:
      summary: Generate a presigned URL to upload the user's thumbnail image
      tags:
        - Users
      responses:
        "200":
          description: Presigned upload URL and media ID generated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InitializeMediaUploadDTO"
        "400":
          description: Invalid request (e.g. missing or invalid user)
        "500":
          description: Server error during URL generation

  #Fetch public profile by username
  /public/profile/{username}:
    get:
      summary: Get public profile by username
      operationId: getPublicProfileByUsername
      tags:
        - Profile
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
          description: The username of the user to retrieve the profile for
      responses:
        "200":
          description: Successful response with combined post and user profile
          content:
            application/json:
              schema:
                type: object
                properties:
                  postProfile:
                    type: object
                    properties:
                      postId:
                        type: string
                        format: uuid
                      description:
                        type: string
                      roommates:
                        type: integer
                      price:
                        type: number
                      title:
                        type: string
                      mediaId:
                        type: string
                        format: uuid
                  userProfile:
                    type: object
                    properties:
                      firstName:
                        type: string
                      lastName:
                        type: string
                      username:
                        type: string
                      thumbnailMediaId:
                        type: string
                        format: uuid
                      bio:
                        type: string
                      email:
                        type: string
                        format: email
                      phone:
                        type: string
                      id:
                        type: string
                        format: uuid
                      institutionName:
                        type: string
  #Put to update user profile
  /users/update:
    put:
      summary: Update the current user's profile
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserProfileDTO"
      responses:
        "200":
          description: Profile updated successfully
        "400":
          description: Validation error or malformed input
        "401":
          description: Unauthorized
        "500":
          description: Server error

  #Get postdrafts for current user
  /posts/drafts:
    get:
      summary: Get the current user's post draft
      tags:
        - Drafts
      responses:
        "200":
          description: Successfully retrieved the user's post draft
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostDraftDTO"
        "400":
          description: Invalid request (e.g., missing user)
        "404":
          description: Draft not found
    post:
      summary: Create a new post draft for the current user
      tags:
        - Drafts
      responses:
        "201":
          description: Draft successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostDraftDTO"
        "400":
          description: Invalid request or draft already exists
        "409":
          description: Draft already exists
    put:
      summary: update post draft for the current user
      tags:
        - Drafts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreatePostDraftDTO" # optional if any fields needed
      responses:
        "201":
          description: Draft successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostDraftDTO"
        "400":
          description: Invalid request or draft already exists
        "409":
          description: Draft already exists
  #Get upload URL for post draft media
  /posts/drafts/{postDraftId}/media:
    post:
      summary: Generate pre-signed URL for post draft media upload
      tags:
        - Media
      parameters:
        - name: postDraftId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Successfully generated upload URL
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InitializeMediaUploadDTO"
        "400":
          description: Invalid postDraftId or request format
        "404":
          description: Post draft not found
    #Confirm uploaded media
  /posts/drafts/{postDraftId}/media/{mediaId}:
    put:
      summary: Confirm uploaded media for post draft
      tags:
        - Media
      parameters:
        - name: postDraftId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: mediaId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Successfully confirmed uploaded media
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FinalizeMediaUploadDTO"
        "400":
          description: Invalid postDraftId or request format
        "404":
          description: Post draft or media not found
    #delete media from post draft
  /posts/drafts/{postDraftId}/media/delete/{mediaId}:
    delete:
      summary: Delete media from post draft
      tags:
        - Media
      parameters:
        - name: postDraftId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: mediaId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Media deleted successfully
        "400":
          description: Invalid postDraftId or mediaId
        "404":
          description: Post draft or media not found
  /users/profile:
    get:
      summary: Get public profile by username
      tags:
        - Profile

      responses:
        "200":
          description: Successful response with combined post and user profile
          content:
            application/json:
              schema:
                type: object
                properties:
                  postProfile:
                    type: object
                    properties:
                      postId:
                        type: string
                        format: uuid
                      description:
                        type: string
                      roommates:
                        type: integer
                      price:
                        type: number
                      title:
                        type: string
                      mediaId:
                        type: string
                        format: uuid
                      post:
                        type: boolean
                        format: boolean
                  userProfile:
                    type: object
                    properties:
                      firstName:
                        type: string
                      lastName:
                        type: string
                      username:
                        type: string
                      thumbnailMediaId:
                        type: string
                        format: uuid
                      bio:
                        type: string
                      email:
                        type: string
                        format: email
                      phone:
                        type: string
                      id:
                        type: string
                        format: uuid
                      institutionName:
                        type: string

        "210":
          description: Successful response with combined post and user profile but post is empty
          content:
            application/json:
              schema:
                type: object
                properties:
                  postProfile:
                    type: object
                    properties:
                      postId:
                        type: string
                        format: uuid
                      description:
                        type: string
                      roommates:
                        type: integer
                      price:
                        type: number
                      title:
                        type: string
                      mediaId:
                        type: string
                        format: uuid
                      post:
                        type: boolean
                        format: boolean
                  userProfile:
                    type: object
                    properties:
                      firstName:
                        type: string
                      lastName:
                        type: string
                      username:
                        type: string
                      thumbnailMediaId:
                        type: string
                        format: uuid
                      bio:
                        type: string
                      email:
                        type: string
                        format: email
                      phone:
                        type: string
                      id:
                        type: string
                        format: uuid
                      institutionName:
                        type: string
  /users/email:
    get:
      summary: Get current email and pending change status
      security:
        - bearerAuth: []
      tags: [Users]
      responses:
        "200":
          description: Current email and any pending email change
          headers:
            X-Request-Id:
              schema: { type: string }
              description: Correlation ID for this request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  type: string

        "401":
          $ref: "#/components/responses/Unauthorized"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "500":
          $ref: "#/components/responses/ServerError"

    post:
      summary: Initiate an email change (send verification code)
      description:
        Starts the email change flow by sending a 6-digit verification code to the **new** email address.
        If a 30-day lock is in effect, returns **423 Locked**.
      security:
        - bearerAuth: []
      tags: [Users]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string

            examples:
              basic:
                value:
                  newEmail: "alice@newmail.com"
      responses:
        "202":
          description: Verification code sent to new email
          headers:
            X-Request-Id:
              schema: { type: string }
        "400":
          description: Invalid input (e.g., bad email)
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }
              examples:
                invalidEmail:
                  value:
                    code: "INVALID_EMAIL"
                    message: "Please enter a valid email address."
        "401":
          $ref: "#/components/responses/Unauthorized"
        "409":
          description: New email conflicts with an existing account
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }
              examples:
                alreadyInUse:
                  value:
                    code: "EMAIL_IN_USE"
                    message: "That email is already registered."
        "423":
          description: Email is locked from changes (30-day window)
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }
              examples:
                locked:
                  value:
                    code: "EMAIL_LOCKED"
                    message: "Email cannot be changed until 2025-11-25T00:00:00Z."
                    lockedUntil: "2025-11-25T00:00:00Z"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "500":
          $ref: "#/components/responses/ServerError"

    put:
      summary: Confirm email change with verification code
      description: Confirms the pending email change using the 6-digit code sent to the new email.
      security:
        - bearerAuth: []
      tags: [Users]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                verificationCode:
                  type: string
      responses:
        "200":
          description: Email changed successfully
          content:
            application/json:
              schema:
                type: string
                example: "createdAt,desc"

              examples:
                ok:
                  value:
                    email: "alice@newmail.com"
                    changedAt: "2025-10-26T18:44:55Z"
                    lockedUntil: "2025-11-25T00:00:00Z"
        "400":
          description: Invalid or expired code / no pending change
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }
              examples:
                invalidCode:
                  value:
                    code: "INVALID_CODE"
                    message: "The verification code is incorrect."
                expiredCode:
                  value:
                    code: "CODE_EXPIRED"
                    message: "The verification code has expired."
                noPending:
                  value:
                    code: "NO_PENDING_CHANGE"
                    message: "There is no pending email change to confirm."
        "401":
          $ref: "#/components/responses/Unauthorized"
        "423":
          description: Email is locked from changes (should be rare here)
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "500":
          $ref: "#/components/responses/ServerError"

  /posts:
    delete:
      tags:
        - Posts
      summary: Delete a post
      responses:
        "204":
          description: Post deleted successfully
        "400":
          description: Bad request
        "404":
          description: Post not found
          # Notifications endpoints
  /notifications:
    get:
      summary: Get a paginated list of notifications for the current user
      operationId: getNotifications
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          required: false
          schema:
            type: integer
            default: 10
        - name: sort
          in: query
          required: false
          schema:
            type: string
            example: "createdAt,desc"
      responses:
        "200":
          description: List of notifications
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PageNotificationDTO"

  /notifications/hasUnread:
    get:
      summary: Check if the current user has unread notifications
      operationId: hasUnreadNotifications
      responses:
        "200":
          description: Whether unread notifications exist
          content:
            application/json:
              schema:
                type: boolean

  /notifications/{id}:
    get:
      summary: Get a single notification by ID
      operationId: getNotification
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: The notification
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotificationDTO"
        "404":
          description: Notification not found

    post:
      summary: Mark a notification as read by ID
      operationId: markNotificationAsRead
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: The updated notification
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotificationDTO"
        "404":
          description: Notification not found
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    UserAnonymous:
      type: object
      required:
        - id
        - firstName
        - lastName
        - username
        - createdAt
      properties:
        id:
          type: string
          format: uuid
        firstName:
          type: string
        lastName:
          type: string
        username:
          type: string
        bio:
          type: string
        thumbnailMediaId:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
    User:
      type: object
      required:
        - id
        - firstName
        - lastName
        - username
        - createdAt
      properties:
        id:
          type: string
          format: uuid
        firstName:
          type: string
        lastName:
          type: string
        username:
          type: string
        newsletterConsent:
          type: boolean
        bio:
          type: string
        thumbnailMediaId:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        email:
          type: string
          format: email
        phone:
          type: string

    PostDraftDTO:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
        price:
          type: integer
        roommates:
          type: integer
        media:
          type: array
          items:
            $ref: "#/components/schemas/PostDraftMediaDTO"
        tags:
          type: array
          items:
            $ref: "#/components/schemas/TagDTO"
        termStartDate:
          type: string
          format: date-time
        termEndDate:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    TagDTO:
      type: object
      properties:
        id:
          type: string
        name:
          type: string

    InitializeMediaUploadDTO:
      type: object
      properties:
        uploadUrl:
          type: string
          format: uri
        mediaId:
          type: string
          format: uuid
      required:
        - uploadUrl
        - mediaId

    UpdateUserProfileDTO:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        username:
          type: string
        bio:
          type: string
        thumbnailMediaId:
          type: string
          format: uuid
        email:
          type: string
          format: email
        newsletterConsent:
          type: boolean
        phone:
          type: string
      required:
        - firstName
        - lastName
        - username
        - email
        - phone
        - newsletterConsent

    CreatePostDraftDTO:
      type: object
      properties:
        submit:
          type: boolean
        title:
          type: string
        description:
          type: string
        price:
          type: integer
        roommates:
          type: integer
        media:
          type: array
          items:
            $ref: "#/components/schemas/PostDraftMediaDTO"
        tags:
          type: array
          items:
            $ref: "#/components/schemas/TagDTO"
        termStartDate:
          type: string
          format: date-time
        termEndDate:
          type: string
          format: date-time

    FinalizeMediaUploadDTO:
      type: object
      properties:
        media:
          $ref: "#/components/schemas/PostDraftMediaDTO"
      required:
        - media

    PostDraftMediaDTO:
      type: object
      properties:
        id:
          type: string
          format: uuid
        postDraftId:
          type: string
          format: uuid
        isPrimary:
          type: boolean
        mediaId:
          type: string
          format: uuid
      required:
        - id
        - postDraftId
        - isPrimary
        - mediaId
    NotificationDTO:
      type: object
      properties:
        title:
          type: string
        id:
          type: string
          format: uuid
        content:
          type: string
        read:
          type: boolean

    PageNotificationDTO:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: "#/components/schemas/NotificationDTO"
        totalElements:
          type: integer
        totalPages:
          type: integer
        size:
          type: integer
        number:
          type: integer
    Error:
      type: object
      required: [code, message]
      properties:
        code:
          type: string
        message:
          type: string
        lockedUntil:
          type: string
          format: date-time
          description: Included when error relates to a lock window.
  responses:
    Unauthorized:
      description: Missing or invalid bearer token
      headers:
        WWW-Authenticate:
          schema: { type: string }
          description: Bearer challenge details.
      content:
        application/json:
          schema: { $ref: "#/components/schemas/Error" }
          examples:
            unauth:
              value:
                code: "UNAUTHORIZED"
                message: "Authentication required."
    TooManyRequests:
      description: Rate limit exceeded
      headers:
        Retry-After:
          schema: { type: integer, format: int32 }
          description: Seconds to wait before retrying.
      content:
        application/json:
          schema: { $ref: "#/components/schemas/Error" }
          examples:
            ratelimited:
              value:
                code: "RATE_LIMITED"
                message: "Too many requests. Please try again later."
    ServerError:
      description: Unexpected server error
      content:
        application/json:
          schema: { $ref: "#/components/schemas/Error" }
          examples:
            oops:
              value:
                code: "INTERNAL_ERROR"
                message: "Something went wrong."
