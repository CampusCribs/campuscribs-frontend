openapi: 3.1.1
info:
  version: 1.0.0
  title: CampusCribs
  description: CampusCribs API Implementation Specification
paths:
  # User auth endpoints
  /users/me:
    get:
      tags:
        - User
      summary: Get current user
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
  #HomePage endpoints

  #Fetches all tags
  /public/tags:
    get:
      tags:
        - Tag
      summary: Get all tags
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    name:
                      type: string
                    tagCategoryId:
                      type: string
  #Fetches curated posts for user
  /public/curated:
    get:
      tags:
        - Curated
      summary: Get curated items
      parameters:
        - in: query
          name: tag
          description: Filter by tags
          required: false
          schema:
            type: array
            items:
              type: string
          style: form
          explode: true
        - in: query
          name: page
          description: Page number (0-based)
          required: false
          schema:
            type: integer
            default: 0
        - in: query
          name: size
          description: Number of results per page
          required: false
          schema:
            type: integer
            default: 20
        - in: query
          name: sort
          description: Sort by field (e.g. `price,asc` or `mediaId,desc`)
          required: false
          schema:
            type: array
            items:
              type: string
          style: form
          explode: true

      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                        mediaId:
                          type: string
                        price:
                          type: number
                  pageable:
                    type: object
                  totalPages:
                    type: integer
                  totalElements:
                    type: integer
                  size:
                    type: integer
                  number:
                    type: integer
                  sort:
                    type: object
                  first:
                    type: boolean
                  last:
                    type: boolean
                  numberOfElements:
                    type: integer
                  empty:
                    type: boolean
  #Search endpoint for posts and users
  /public/search:
    get:
      summary: Search for posts and users
      parameters:
        - in: query
          name: query
          required: true
          description: Search term
          schema:
            type: string
      responses:
        "200":
          description: Successful search
          content:
            application/json:
              schema:
                type: object
                properties:
                  posts:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        title:
                          type: string
                        thumbnail:
                          type: string
                          nullable: true
                  users:
                    type: array
                    items:
                      type: object
                      properties:
                        username:
                          type: string
                        thumbnail:
                          type: string
                          nullable: true
  #Fetch individual post
  /public/crib/{postId}:
    get:
      summary: Get a public post by ID
      tags:
        - Public Posts
      parameters:
        - name: postId
          in: path
          required: true
          description: The ID of the post to retrieve
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Successful retrieval of the post
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  firstName:
                    type: string
                  lastName:
                    type: string
                  username:
                    type: string
                  title:
                    type: string
                  description:
                    type: string
                  price:
                    type: number
                  roommates:
                    type: integer
                  mediaIds:
                    type: array
                    items:
                      type: string
                      format: uuid
                  tags:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                        name:
                          type: string
                  termStartDate:
                    type: string
                    format: date-time
                  termEndDate:
                    type: string
                    format: date-time
  #Edit profile endpoints

  #Fetch presigned URL for media upload
  /users/me/thumbnail-upload:
    get:
      summary: Generate a presigned URL to upload the user's thumbnail image
      tags:
        - Users
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Presigned upload URL and media ID generated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InitializeMediaUploadDTO"
        "400":
          description: Invalid request (e.g. missing or invalid user)
        "500":
          description: Server error during URL generation

  #Fetch public profile by username
  /public/profile/{username}:
    get:
      summary: Get public profile by username
      operationId: getPublicProfileByUsername
      tags:
        - Profile
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
          description: The username of the user to retrieve the profile for
      responses:
        "200":
          description: Successful response with combined post and user profile
          content:
            application/json:
              schema:
                type: object
                properties:
                  postProfile:
                    type: object
                    properties:
                      postId:
                        type: string
                        format: uuid
                      description:
                        type: string
                      roommates:
                        type: integer
                      price:
                        type: number
                      title:
                        type: string
                      mediaId:
                        type: string
                        format: uuid
                  userProfile:
                    type: object
                    properties:
                      firstName:
                        type: string
                      lastName:
                        type: string
                      username:
                        type: string
                      thumbnailMediaId:
                        type: string
                        format: uuid
                      bio:
                        type: string
                      email:
                        type: string
                        format: email
                      phone:
                        type: string
  #Get postdrafts for current user
  /posts/drafts:
    get:
      summary: Get the current user's post draft
      tags:
        - Drafts
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Successfully retrieved the user's post draft
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostDraftDTO"
        "400":
          description: Invalid request (e.g., missing user)
        "404":
          description: Draft not found
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    UserAnonymous:
      type: object
      required:
        - id
        - firstName
        - lastName
        - username
        - createdAt
      properties:
        id:
          type: string
          format: uuid
        firstName:
          type: string
        lastName:
          type: string
        username:
          type: string
        bio:
          type: string
        thumbnailMediaId:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
    User:
      type: object
      required:
        - id
        - firstName
        - lastName
        - username
        - createdAt
      properties:
        id:
          type: string
          format: uuid
        firstName:
          type: string
        lastName:
          type: string
        username:
          type: string
        bio:
          type: string
        thumbnailMediaId:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        email:
          type: string
          format: email
        phone:
          type: string
    PostDraftDTO:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
        price:
          type: integer
        roommates:
          type: integer
        media:
          type: array
          items:
            $ref: "#/components/schemas/PostDraftMediaDTO"
        tags:
          type: array
          items:
            $ref: "#/components/schemas/TagDTO"
        termStartDate:
          type: string
          format: date-time
        termEndDate:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    PostDraftMediaDTO:
      type: object
      properties:
        id:
          type: string
          format: uuid
        postDraftId:
          type: string
          format: uuid
        isPrimary:
          type: boolean
        mediaId:
          type: string
          format: uuid

    TagDTO:
      type: object
      properties:
        id:
          type: string
        name:
          type: string

    InitializeMediaUploadDTO:
      type: object
      properties:
        uploadUrl:
          type: string
          format: uri
        mediaId:
          type: string
          format: uuid
      required:
        - uploadUrl
        - mediaId
